import { apiClient } from './apiClient';

// Interface cho request ƒëƒÉng nh·∫≠p
export interface LoginRequest {
  email: string;
  password: string;
}

// Interface cho request ƒëƒÉng k√Ω - c·∫≠p nh·∫≠t theo Swagger /api/User
export interface SignUpRequest {
  fullName: string;
  email: string;
  phoneNumber: string;
  password: string;
  role?: string;
}

// Interface cho response authentication - c·∫≠p nh·∫≠t ƒë·ªÉ linh ho·∫°t h∆°n
export interface AuthResponse {
  token: string;
  user: {
    id: string;
    fullName: string;
    email: string;
    phoneNumber: string;
    role: string;
  };
  message?: string;
}

// Interface cho response t·ª´ /api/User (c√≥ th·ªÉ kh√°c v·ªõi AuthResponse)
export interface UserCreateResponse {
  id?: string;
  fullName?: string;
  email?: string;
  phoneNumber?: string;
  role?: string;
  message?: string;
  status?: boolean;
  // Th√™m c√°c field kh√°c c√≥ th·ªÉ c√≥
  [key: string]: unknown;
}

// Interface cho error response
export interface ErrorResponse {
  status: boolean;
  statusCode: number;
  data: unknown;
  errors: string[];
  message?: string;
}

// API ƒëƒÉng nh·∫≠p - s·ª≠ d·ª•ng endpoint ƒë√∫ng t·ª´ Swagger
export const loginUser = async (credentials: LoginRequest): Promise<AuthResponse> => {
  try {
    const response = await apiClient.post('/api/Auth/login', credentials);
    console.log('Raw API response:', response);
    
    // Extract data from AxiosResponse
    const responseData = response.data;
    console.log('Response data:', responseData);
    
    // Validate response structure
    if (!responseData || typeof responseData !== 'object') {
      throw new Error('Invalid response format from API');
    }
    
    if (!responseData.token || !responseData.user) {
      console.error('Missing token or user in response:', responseData);
      throw new Error('Response missing required fields: token or user');
    }
    
    if (!responseData.user.id || !responseData.user.fullName || !responseData.user.email) {
      console.error('Invalid user data structure:', responseData.user);
      throw new Error('Invalid user data structure in response');
    }
    
    console.log('Validated response:', responseData);
    return responseData as AuthResponse;
  } catch (error: unknown) {
    console.error('Login API error:', error);
    throw error;
  }
};

// API ƒëƒÉng k√Ω - l√†m l·∫°i v·ªõi c√°ch ti·∫øp c·∫≠n m·ªõi
export const signUpUser = async (userData: SignUpRequest): Promise<AuthResponse> => {
  try {
    console.log('üöÄ Starting signup process...');
    
    // G·ªçi API ƒëƒÉng k√Ω
    const response = await apiClient.post('/api/User', userData);
    const responseData = response.data;
    
    console.log('üì• API response:', responseData);
    
    // Ki·ªÉm tra l·ªói t·ª´ server
    if (responseData?.status === false) {
      const errorMsg = responseData.errors?.[0] || responseData.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
      throw new Error(errorMsg);
    }
    
    // N·∫øu c√≥ token v√† user - tr·∫£ v·ªÅ lu√¥n
    if (responseData?.token && responseData?.user) {
      return responseData as AuthResponse;
    }
    
    // N·∫øu ch·ªâ c√≥ th√¥ng tin user (kh√¥ng c√≥ token) - t·∫°o mock response
    if (responseData?.id || responseData?.email) {
      return {
        token: 'temp_token_' + Date.now(),
        user: {
          id: responseData.id || 'temp_id',
          fullName: responseData.fullName || userData.fullName,
          email: responseData.email || userData.email,
          phoneNumber: responseData.phoneNumber || userData.phoneNumber,
          role: responseData.role || 'customer'
        },
        message: 'User created successfully. Please login to continue.'
      };
    }
    
    throw new Error('Unexpected response format from signup API');
    
  } catch (error: unknown) {
    console.error('üí• Signup API error:', error);
    
    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
    if (error && typeof error === 'object') {
      // L·ªói t·ª´ Axios (network error, server error)
      if ('response' in error && error.response) {
        const response = error.response as { status: number; data?: { errors?: string[]; message?: string } };
        
        if (response.status === 500) {
          throw new Error('L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.');
        } else if (response.status === 400) {
          const errorMsg = response.data?.errors?.[0] || response.data?.message || 'D·ªØ li·ªáu ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá';
          throw new Error(errorMsg);
        } else if (response.status === 409) {
          throw new Error('Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.');
        } else if (response.status >= 500) {
          throw new Error('L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
          const errorMsg = response.data?.errors?.[0] || response.data?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
          throw new Error(errorMsg);
        }
      }
      
      // L·ªói t·ª´ server response
      if ('status' in error && (error as { status: boolean }).status === false) {
        const errorData = error as { errors?: string[]; message?: string };
        const errorMsg = errorData.errors?.[0] || errorData.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
        throw new Error(errorMsg);
      }
      
      // L·ªói network
      if ('message' in error && error.message === 'Network Error') {
        throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.');
      }
      
      // L·ªói timeout
      if ('code' in error && (error as { code: string }).code === 'ECONNABORTED') {
        throw new Error('K·∫øt n·ªëi b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
    
    // L·ªói m·∫∑c ƒë·ªãnh
    const errorMessage = error && typeof error === 'object' && 'message' in error 
      ? String(error.message) 
      : "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
    throw new Error(errorMessage);
  }
};

// API ƒëƒÉng xu·∫•t - ch·ªâ g·ªçi endpoint logout, kh√¥ng x√≥a localStorage
export const logoutUser = async (): Promise<void> => {
  try {
    // G·ªçi ƒë·∫øn endpoint n√†y ƒë·ªÉ logout
    await apiClient.post('/api/Auth/logout');
    console.log('Logout API called successfully');
  } catch (error) {
    console.error('Logout API error:', error);
    // Kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m, AuthContext s·∫Ω x·ª≠ l√Ω
  }
};

// API refresh token
export const refreshToken = async () => {
  const response = await apiClient.post('/api/Auth/refresh-token');
  return response;
};

// API g·ª≠i email verification
export const sendVerificationEmail = async (email: string): Promise<{ message: string }> => {
  try {
    const response = await apiClient.post('/api/Auth/send-verification', { email });
    return response.data;
  } catch (error: unknown) {
    console.error('Send verification email error:', error);
    throw error;
  }
};

// API verify email
export const verifyEmail = async (email: string, code: string): Promise<{ message: string }> => {
  try {
    const response = await apiClient.post('/api/Auth/verify-email', { email, code });
    return response.data;
  } catch (error: unknown) {
    console.error('Verify email error:', error);
    throw error;
  }
};

// API forgot password
export const forgotPassword = async (email: string): Promise<{ message: string }> => {
  try {
    const response = await apiClient.post('/api/Auth/forgot-password', { email });
    return response.data;
  } catch (error: unknown) {
    console.error('Forgot password error:', error);
    throw error;
  }
};

// API reset password
export const resetPassword = async (email: string, code: string, newPassword: string): Promise<{ message: string }> => {
  try {
    const response = await apiClient.post('/api/Auth/reset-password', { 
      email, 
      code, 
      newPassword 
    });
    return response.data;
  } catch (error: unknown) {
    console.error('Reset password error:', error);
    throw error;
  }
};

// API change password
export const changePassword = async (email: string, oldPassword: string, newPassword: string): Promise<{ message: string }> => {
  try {
    const response = await apiClient.post('/api/Auth/change-password', { 
      email, 
      oldPassword, 
      newPassword 
    });
    return response.data;
  } catch (error: unknown) {
    console.error('Change password error:', error);
    throw error;
  }
};

export const googleLogin = async (idToken: string): Promise<AuthResponse> => {
  try {
    const response = await apiClient.post('/api/Auth/google-login', { 
      IdToken: idToken  // Fix: Use capital I to match backend DTO
    });
    console.log('Google login API response:', response);
    
    const responseData = response.data;
    console.log('Google login response data:', responseData);
    
    // Validate response structure
    if (!responseData || typeof responseData !== 'object') {
      throw new Error('Invalid response format from Google login API');
    }
    
    if (!responseData.token || !responseData.user) {
      console.error('Missing token or user in Google login response:', responseData);
      throw new Error('Response missing required fields: token or user');
    }
    
    if (!responseData.user.id || !responseData.user.fullName || !responseData.user.email) {
      console.error('Invalid user data structure in Google login:', responseData.user);
      throw new Error('Invalid user data structure in response');
    }
    
    console.log('Validated Google login response:', responseData);
    return responseData as AuthResponse;
  } catch (error: unknown) {
    console.error('Google login API error:', error);
    throw error;
  }
};
